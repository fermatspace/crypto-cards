-- CONSIDER WHICH OBJECTS ARE EXPORTED
module Cryptography where

import Prelude 
import Crypto.PubKey.DH hiding (generatePublic)
import Crypto.PubKey.ElGamal
import Crypto.Random
import Cards
import Crypto.Number.Serialize

-- | A 2048 bit safe prime generated via generateSafePrime in the Crypto.Number.Prime module of the cryptonite package
safePrime2048 :: Integer
safePrime2048 = 26006645102793338807810923612989518151059133495728528399856510483777587007725527731951314116559668014818408287975263610058208931047892984153732691376729763098774953813179394604392969194221987615757898295861427793216864423559379795549846279654373675127301030359938889707141315250209058067316369812482516816670530958133285155932461418550596015726080901922506759608859148980083036852159637160987343168023134537117474143592314732823789956937931848225695975318787212025703794117780049327954942307756693745501145692227764358472601348237313084601085592846113941365237097934286083838276351628649508719697565238352288988335987

-- | Define a set of DH parameters. Since p is a safe prime g is also a prime. Thus by sylow theorem the subgroup of order 2g has no small subgroups. Any game can be initiated with a given safeprime bit size given generateParams from the Crypto.Pubkey.DH module. 
unsafeParams :: Params
unsafeParams = Params p g 2048
        where 
                p = safePrime2048
                g = (safePrime2048 -1) `div` 2

combinePubKeys :: Params -> PublicNumber -> PublicNumber -> PublicNumber
combinePubKeys params@(Params p _ _) (PublicNumber a) (PublicNumber b) = PublicNumber c
        where c = (a * b) `mod` p

unitPubKey :: PublicNumber
unitPubKey = PublicNumber 1

combinePubKeysList :: Params -> [PublicNumber] -> PublicNumber
combinePubKeysList params xs = foldr (combinePubKeys params) unitPubKey xs


















--------------------------------------------------- FOR TESTING ONLY -----------------------------------------
-- | Test private key, DO NOT USE IN PRODUCTION!
unsafePrivKey1 :: PrivateNumber
unsafePrivKey1 = PrivateNumber

-- | Test private key, DO NOT USE IN PRODUCTION!
unsafePrivKey2 :: PrivateNumber
unsafePrivKey2 = PrivateNumber

-- | Test private key, DO NOT USE IN PRODUCTION!
unsafePrivKey3 :: PrivateNumber
unsafePrivKey3 = PrivateNumber

-- | Associates test public key. DO NOT USE IN PRODUCTION!
unsafePubKey1 :: PublicNumber
unsafePubKey1 = generatePublic unsafeParams unsafePrivKey1

-- | Associates test public key. DO NOT USE IN PRODUCTION!
unsafePubKey2 :: PublicNumber
unsafePubKey2 = generatePublic unsafeParams unsafePrivKey2

-- | Associates test public key. DO NOT USE IN PRODUCTION!
unsafePubKey3 :: PublicNumber
unsafePubKey3 = generatePublic unsafeParams unsafePrivKey3
